package main;
import java.io.File;
import java.util.ArrayList;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.*;
import java.awt.Dimension;
import java.awt.Color;
import java.awt.Image;
import javax.imageio.ImageIO;    

/**
 * GUI Class using swing. This class essentially renders a representation of the ImageRepoModel class, and communication between the two is done through the ImageRepoController.
 * @author Sean Wallach
 */
public class ImageRepoGUI extends javax.swing.JFrame {
    protected ArrayList<File> photoList = new ArrayList<File>();        // This is the list of the files that need to be drawn
    File photoToView;                                                   // This photo is the one currently selected for viewing (when a user clicks or double clicks a photo).
     
    ImageRepoController controller = new ImageRepoController();         // The Controller is used to communicate with the Model, decoupling the system and ensuring each class maintains high cohesion
    boolean searchClicked = false;                                      // Global Flag for aesthetic method
    
    /**
     * Creates new ImageRepoGUI
     */
    public ImageRepoGUI() {
        initComponents();                   // Method generated by NetBeans
        setFrameIcon();                     
        jButton2.setEnabled(false);         // Disables the "view" button until an image is selected by the user
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * It is automatically generated by NetBeans
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Back End Challenge");
        setBackground(new java.awt.Color(229, 229, 229));

        jScrollPane1.setToolTipText("");
        jScrollPane1.setHorizontalScrollBar(null);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(200, 32767));
        jScrollPane1.setViewportView(jPanel2);

        jButton1.setText("Add photo(s)");
        jButton1.setToolTipText("Upload one, or multiple photos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View Photo");
        jButton2.setToolTipText("View the full photo in a seperate window");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(693, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(316, 316, 316)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
       
    /*
    * This method handles what action to take when the user clicks on the "Upload" jButton
    */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser chooser = new JFileChooser();                          // Create a new file chooser  
         FileNameExtensionFilter filter = new FileNameExtensionFilter(      // Whitelist the desired file extensions
        "JPG & GIF Images", "jpg", "gif","jpeg");
        chooser.setFileFilter(filter);                                  
        chooser.setMultiSelectionEnabled(true);
        int result = chooser.showOpenDialog(null);  // The file chooser returns an int result, which 
        
        // If the user chooses to cancel the file upload, it must be handled correctly
        if (result == JFileChooser.CANCEL_OPTION) {
            return;                                     // Returns the function before any other logic is reached.
        }
        
        File[] files = chooser.getSelectedFiles();      // A local array for the files selected
        
        // Files that were selected are sent to the controller, to be passed on
        photoList = controller.addImages(files);        
        
        for(File file:photoList) {
            this.addImage(file);                        
            jButton1.enableInputMethods(true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Method calls 
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        openView();
    }//GEN-LAST:event_jButton2ActionPerformed
   
    /*
    * This method handles what action to take when the user clicks on the "View" jButton
    */
    private void openView() {
        // If a photo has not been selected, this method should do nothing
        // Otherwise, a new frame is created for the image to be displayed in it's full size
        if (photoToView != null) {
            javax.swing.JFrame viewFrame = new javax.swing.JFrame("Viewing: " + photoToView.getAbsolutePath());        // New jFrame for the picture to be viewed in all its glory
            javax.swing.JLabel tempPanel = new javax.swing.JLabel();
           
            ImageIcon imgToSet = new ImageIcon(photoToView.getAbsolutePath());      // Converts the file to an ImageIcon for the frame
            tempPanel.setIcon(imgToSet);
            
            viewFrame.setSize(tempPanel.getWidth(),tempPanel.getHeight());          // Set the size of the frame to match the size of the photo
            viewFrame.setResizable(false);
            viewFrame.add(tempPanel);
            viewFrame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);                   
            viewFrame.pack();
            viewFrame.setVisible(true);
        }
    }
    /**
     * Method adds an image to the "gallery" panel, and updates the frame
     * @param file picture to be added to gallery
     */
    private void addImage(File file) {
        javax.swing.JLabel tempPanel = new javax.swing.JLabel();
         ImageIcon imgToSet = new ImageIcon(file.getAbsolutePath());     // create an image icon from the File that was passed to the function
        tempPanel.setPreferredSize(new Dimension(200,200));             
        tempPanel.setIcon(imgToSet);
       
        tempPanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                photoToView = new File(file.getAbsolutePath());
                if (e.getClickCount() == 2) {                           // Double Clicking opens up the View frame
                     openView();
                }
                jButton2.setEnabled(true);                              // Since a photo has now been selected, the View button can be enabled
            }
            @Override
            public void mousePressed(MouseEvent e) {
                tempPanel.setBorder(BorderFactory.createLineBorder(Color.black));       // Gives the user some indication that his click was received
            }
             @Override
            public void mouseReleased(MouseEvent e) {
                tempPanel.setBorder(BorderFactory.createLineBorder(Color.white));
            }
        });
       
        jPanel2.add(tempPanel);
        SwingUtilities.updateComponentTreeUI(this);  //updates frame
    } 
    
   
    /**
     * Generated by NetBeans 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageRepoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageRepoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageRepoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageRepoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImageRepoGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    // This method sets the icon of this frame
    private void setFrameIcon() {
        try {
            this.setIconImage(ImageIO.read(new File("../resources/icon.png")));
        }
        catch (Exception exc) {
            exc.printStackTrace();
        }
    }
}
